// This file is auto-generated by @hey-api/openapi-ts

export type TokenRefreshRequest = {
    refreshToken: string;
};

export type ApiResponseDtoTokenRefreshResponse = {
    error: boolean;
    message: string;
    code: number;
    data?: TokenRefreshResponse;
};

export type TokenRefreshResponse = {
    accessToken: string;
    refreshToken: string;
};

export type LogoutRequest = {
    accessToken: string;
    refreshToken: string;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type ApiResponseDtoLoginResponse = {
    error: boolean;
    message: string;
    code: number;
    data?: LoginResponse;
};

export type LoginResponse = {
    accessToken: string;
    refreshToken: string;
};

export type ApiResponseDtoListResponseHousing = {
    error: boolean;
    message: string;
    code: number;
    data?: ListResponseHousing;
};

export type Housing = {
    id?: bigint;
    longitude: number;
    latitude: number;
    housingMedianAge: number;
    totalRooms: number;
    totalBedrooms: number;
    population: number;
    households: number;
    medianIncome: number;
    medianHouseValue: number;
    oceanProximity: string;
    createdAt: Date;
    updatedAt: Date;
};

export type ListResponseHousing = {
    data: Array<Housing>;
    total: bigint;
    page: number;
    size: number;
    pages: number;
    columns: Array<string>;
};

export type UserInfoResponse = {
    email: string;
    roles: Array<string>;
    username: string;
};

export type RefreshTokenData = {
    /**
     * Refresh token to generate new tokens
     */
    body: TokenRefreshRequest;
    path?: never;
    query?: never;
    url: '/api/auth/refresh';
};

export type RefreshTokenErrors = {
    /**
     * Invalid or expired refresh token
     */
    400: string;
};

export type RefreshTokenError = RefreshTokenErrors[keyof RefreshTokenErrors];

export type RefreshTokenResponses = {
    /**
     * Successfully refreshed tokens
     */
    200: ApiResponseDtoTokenRefreshResponse;
};

export type RefreshTokenResponse = RefreshTokenResponses[keyof RefreshTokenResponses];

export type LogoutUserData = {
    /**
     * Refresh token to invalidate
     */
    body: LogoutRequest;
    path?: never;
    query?: never;
    url: '/api/auth/logout';
};

export type LogoutUserErrors = {
    /**
     * Invalid refresh token
     */
    400: string;
};

export type LogoutUserError = LogoutUserErrors[keyof LogoutUserErrors];

export type LogoutUserResponses = {
    /**
     * Successfully logged out
     */
    200: string;
};

export type LogoutUserResponse = LogoutUserResponses[keyof LogoutUserResponses];

export type AuthenticateUserData = {
    /**
     * Email and password for authentication
     */
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/auth/login';
};

export type AuthenticateUserErrors = {
    /**
     * Bad Request
     */
    400: string;
    /**
     * Invalid credentials
     */
    401: string;
};

export type AuthenticateUserError = AuthenticateUserErrors[keyof AuthenticateUserErrors];

export type AuthenticateUserResponses = {
    /**
     * Successfully authenticated
     */
    200: ApiResponseDtoLoginResponse;
};

export type AuthenticateUserResponse = AuthenticateUserResponses[keyof AuthenticateUserResponses];

export type GetHousingListData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        size?: number;
    };
    url: '/napi/housing/list';
};

export type GetHousingListErrors = {
    /**
     * [en] Invalid page or size parameter
     * [ko] 페이지 또는 크기 파라미터가 잘못되었습니다
     */
    400: ApiResponseDtoListResponseHousing;
};

export type GetHousingListError = GetHousingListErrors[keyof GetHousingListErrors];

export type GetHousingListResponses = {
    /**
     * [en] Successfully retrieved housing data
     * [ko] 주택 데이터를 성공적으로 조회했습니다
     */
    200: ApiResponseDtoListResponseHousing;
};

export type GetHousingListResponse = GetHousingListResponses[keyof GetHousingListResponses];

export type GetUserInfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type GetUserInfoErrors = {
    /**
     * Unauthorized - Invalid or missing access token
     */
    401: string;
};

export type GetUserInfoError = GetUserInfoErrors[keyof GetUserInfoErrors];

export type GetUserInfoResponses = {
    /**
     * Successfully retrieved user information
     */
    200: UserInfoResponse;
};

export type GetUserInfoResponse = GetUserInfoResponses[keyof GetUserInfoResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:8080' | 'http://localhost:3000' | (string & {});
};