// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Composable, TDataShape, Client } from './client';
import type { RefreshTokenData, RefreshTokenResponse, RefreshTokenError, LogoutUserData, LogoutUserResponse, LogoutUserError, AuthenticateUserData, AuthenticateUserResponse, AuthenticateUserError, GetHousingListData, GetHousingListResponse, GetHousingListError, GetUserInfoData, GetUserInfoResponse, GetUserInfoError } from './types.gen';
import { client as _heyApiClient } from './client.gen';
import { getHousingListResponseTransformer } from './transformers.gen';

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Refresh JWT tokens
 * Generates new access and refresh tokens from a valid refresh token.
 */
export const refreshToken = <TComposable extends Composable, DefaultT extends RefreshTokenResponse = RefreshTokenResponse>(options: Options<TComposable, RefreshTokenData, RefreshTokenResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, RefreshTokenResponse | DefaultT, RefreshTokenError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout user
 * Invalidates refresh tokens for the user.
 */
export const logoutUser = <TComposable extends Composable, DefaultT extends LogoutUserResponse = LogoutUserResponse>(options: Options<TComposable, LogoutUserData, LogoutUserResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, LogoutUserResponse | DefaultT, LogoutUserError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/logout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Authenticate user and generate JWT tokens
 * Validates user credentials and provides access and refresh tokens.
 */
export const authenticateUser = <TComposable extends Composable, DefaultT extends AuthenticateUserResponse = AuthenticateUserResponse>(options: Options<TComposable, AuthenticateUserData, AuthenticateUserResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).post<TComposable, AuthenticateUserResponse | DefaultT, AuthenticateUserError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 *
 * [en] Get California Housing Prices data with pagination.
 * [ko] 캘리포니아 주택 가격 데이터를 페이지네이션으로 조회합니다.
 *
 *
 * [en] Retrieve paginated housing data including median house values, location, and demographic information from California census
 * [ko] 캘리포니아 인구조사 데이터에서 중간 주택 가격, 위치, 인구통계 정보를 포함한 주택 데이터를 페이지 단위로 가져옵니다
 *
 */
export const getHousingList = <TComposable extends Composable, DefaultT extends GetHousingListResponse = GetHousingListResponse>(options: Options<TComposable, GetHousingListData, GetHousingListResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetHousingListResponse | DefaultT, GetHousingListError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        responseTransformer: getHousingListResponseTransformer,
        url: '/napi/housing/list',
        ...options
    });
};

/**
 * Get current user's information
 * Retrieves the logged-in user's information using a valid access token.
 */
export const getUserInfo = <TComposable extends Composable, DefaultT extends GetUserInfoResponse = GetUserInfoResponse>(options: Options<TComposable, GetUserInfoData, GetUserInfoResponse, DefaultT>) => {
    return (options.client ?? _heyApiClient).get<TComposable, GetUserInfoResponse | DefaultT, GetUserInfoError, DefaultT>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/me',
        ...options
    });
};